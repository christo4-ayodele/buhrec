// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
  
}

// schema.prisma

// enum Program{
//   Undergraduate
//   Postgraduate
// }

enum AdminRole{
  Chair
  Assistant
  Authorized_Staff 
}




// Define the User entity
model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // Define the primary key as ObjectId
  email       String?     @unique
  emailVerified DateTime?
  name        String?
  image       String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  program     String? @default("Undergraduate")
  // Add other user-related fields as needed
  
  //Define the relationship with Research
  research Research[]

  //Define the relationship with Account
  accounts Account[]

  // Define the relationship with Student

}


model Admin{
  id                String @id @default(auto()) @map("_id") @db.ObjectId //Define the primary key as ObjectId
  email             String? @unique
  name              String?
  image             String?
  hashedPassword    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  role              AdminRole @default(Chair)
  totalReviewedWork   String
  pendingReviewedWork String     

  research Research[]

  accounts Account[]

}

model Reviewer{
  id                String @id @default(auto()) @map("_id") @db.ObjectId //Define the primary key as ObjectId
  email             String? @unique
  name              String?
  image             String?
  hashedPassword    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  totalReviewedWork   String
  pendingReviewedWork String     

  research Research[]

  accounts Account[]

}


model Research {
   id                        String   @id @default(auto()) @map("_id") @db.ObjectId // Define the primary key as ObjectId
   writerId                  String?   @db.ObjectId
   adminId                   String[] @db.ObjectId
   reviewerId                String?   @db.ObjectId       
   title                     String
   price                     String   
   hasPaid                   Boolean
   stripeId                  String
   paperUrl                  String 
   titleLength               String
   introductionLength        String
   scopeLength               String
   justificationLength       String
   objectivesLength          String
   hypothesisLength          String
   literatureReviewLength    String
   materials_MethodsLength   String
   isAssigned                Boolean?

   
  user Student? @relation(fields: [writerId], references: [id], onDelete: Cascade)
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)
  review Reviewer? @relation(fields: [reviewerId], references: [id], onDelete: Cascade)


}

model Account {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type  String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user Student @relation(fields: [userId], references:  [id], onDelete: Cascade)
  admin Admin @relation(fields: [userId], references:  [id], onDelete: Cascade)
  reviewer Reviewer @relation(fields: [userId], references:  [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

